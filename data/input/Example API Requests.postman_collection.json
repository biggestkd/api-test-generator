{
	"info": {
		"_postman_id": "5e6ce63f-a610-4295-9dce-900032c193e1",
		"name": "Example API Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10029482"
	},
	"item": [
		{
			"name": "TestGetManagersSuccess",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('account');",
							"});",
							"",
							"// Test",
							"pm.test(\"Validate data types of response fields\", function () {",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"    let expectedTypes = {",
							"        id: 'string',",
							"        name: 'string',",
							"        account: 'number',",
							"    };",
							" ",
							"    for (let field in jsonData) {",
							"        if(expectedTypes.hasOwnProperty(field)) {",
							"            pm.expect(typeof jsonData[field]).to.eql(expectedTypes[field]);",
							"        }",
							"    }",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/managers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"managers"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestGetManagerByIdSuccess",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('account');",
							"});",
							"",
							"// Test",
							"pm.test(\"Validate data types of response fields\", function () {",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"    let expectedTypes = {",
							"        id: 'string',",
							"        name: 'string',",
							"        account: 'number',",
							"    };",
							" ",
							"    for (let field in jsonData) {",
							"        if(expectedTypes.hasOwnProperty(field)) {",
							"            pm.expect(typeof jsonData[field]).to.eql(expectedTypes[field]);",
							"        }",
							"    }",
							"});",
							"",
							"// Test",
							"pm.test(\"Response has correct Id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(\"p6ttyv5\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/managers/p6ttyv5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"managers",
						"p6ttyv5"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestGetManagerByIdFailed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test ",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/managers/10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"managers",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestPostManagersSuccess",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test ",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('account');",
							"});",
							"",
							"// Test",
							"pm.test(\"Validate data types of response fields\", function () {",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"    let expectedTypes = {",
							"        id: 'string',",
							"        name: 'string',",
							"        account: 'number',",
							"    };",
							" ",
							"    for (let field in jsonData) {",
							"        if(expectedTypes.hasOwnProperty(field)) {",
							"            pm.expect(typeof jsonData[field]).to.eql(expectedTypes[field]);",
							"        }",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"random_name\",\n    \"account\": 900\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/managers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"managers"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestPostManagersFailed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test ",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/managers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"managers"
					]
				}
			},
			"response": []
		}
	]
}